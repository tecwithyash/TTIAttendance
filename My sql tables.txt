CREATE TABLE Users (
    user_id INT IDENTITY(1,1) PRIMARY KEY,
    username NVARCHAR(50) NOT NULL UNIQUE,
    password NVARCHAR(255) NOT NULL,
    role NVARCHAR(20) NOT NULL,
    designation NVARCHAR(50),
    is_approved BIT NOT NULL DEFAULT 0,
    registration_date DATETIME DEFAULT GETDATE()
);


CREATE TABLE Notifications (
    notification_id INT IDENTITY(1,1) PRIMARY KEY,
    user_id INT NOT NULL,
    message NVARCHAR(255) NOT NULL,
    created_at DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);



CREATE TABLE Salary (
    salary_id INT IDENTITY(1,1) PRIMARY KEY,
    user_id INT NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    updated_at DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

CREATE TABLE Attendance (
    attendance_id INT IDENTITY(1,1) PRIMARY KEY,
    user_id INT NOT NULL,
    attendance_date DATE DEFAULT CAST(GETDATE() AS DATE),
    status NVARCHAR(10) NOT NULL CHECK (status IN ('Present', 'Absent')),
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);










CREATE OR ALTER TRIGGER trg_AfterUserInsert
ON Users
AFTER INSERT
AS
BEGIN
    SET NOCOUNT ON;

    -- Insert a notification for all new users
    INSERT INTO Notifications (user_id, message, created_at)
    SELECT user_id, CONCAT('New user registered: ', username), GETDATE()
    FROM inserted;

    -- Insert into Salary table if the new user is an Employee
    INSERT INTO Salary (user_id, amount)
    SELECT user_id, 0 -- Default salary for Employees
    FROM inserted
    WHERE role = 'Employee';
END;



CREATE INDEX idx_user_role ON Users(role);
CREATE INDEX idx_notifications_user_id ON Notifications(user_id);
